plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
}
import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

// Load props from parent gradle.properties.
def props = new Properties()
file("gradle.properties").withInputStream { props.load(it) }

archivesBaseName = "${props.mod_id}-fabric-${props.minecraft_version}"
version = props.mod_version
group = props.maven_group

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

sourceSets {
    main {
        java {
            srcDir "src/main/java"
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
}

loom {
    accessWidenerPath = file("src/main/resources/${props.mod_id}.accesswidener")
}

dependencies {
    // Minecraft and mappings.
    minecraft "com.mojang:minecraft:${props.minecraft_version}"

    mappings loom.layered {
        officialMojangMappings()
    }

    // Fabric loader and API.
    modImplementation "net.fabricmc:fabric-loader:${props.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${props.fabric_version}"

    // Required for javax.annotation.Nullable to work properly.
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
}

processResources {
    inputs.property "mod_version", props.mod_version

    // Replace ${mod_version}, ${minecraft_version} and ${loader} with the correct values.
    filesMatching(["fabric.mod.json", "pack.mcmeta"]) {
        expand (
                "mod_id": props.mod_id,
                "mod_version": props.mod_version,
                "minecraft_version": props.minecraft_version,
                "loader_version": props.loader_version,
                "charmony_version": props.charmony_version,
                "discord_link": props.discord_link
        )
    }

    // Replace ${refmap_file} in all json files with the full path to the generated refmap.
    filesMatching([props.mod_id + ".mixins.json", "charmony.client.mixins.json", "charmony.common.mixins.json"]) {
        expand "refmap_file": props.mod_id + "-fabric-${props.minecraft_version}" + "-refmap.json"
    }

    duplicatesStrategy(DuplicatesStrategy.INCLUDE)

    // Expand resource templates.
    filesMatching("**/*.template.json") {
        JsonBuilder json = new JsonBuilder(new JsonSlurper().parseText(it.file.text))
        String template = new JsonBuilder(json.content.template).toPrettyString()
        def v = json.content.variants
        Iterable<String> variants
        if (v instanceof String) {
            def f = file("${sourceSets.main.resources.srcDirs[0]}/META-INF/variants/${v}.variants");
            if (!f.exists()) {
                throw new Exception("Can't find ${f.name}")
            }
            variants = f.readLines().findAll { !it.isEmpty() }
        }
        else variants = v
        File dir = it.relativePath.parent.getFile(file("$buildDir/resources/main"))
        dir.mkdirs()
        String name = it.name.replace(".template.json", ".json")
        // String[] replacements = v instanceof String ? variants.remove(0).split(':') : ["VARIANT"]
        String[] replacements = variants.remove(0).split("\\|");
        for (variant in variants) {
            Map<String, String> s = [replacements, variant.split("\\|", -1)].transpose().collectEntries()
            def file = new File(dir, s.inject(name) { r, e -> r.replace(e.key, e.value) })
            if (!file.exists()) {
                file.createNewFile()
                file.text = s.inject(template) { r, e -> r.replace(e.key, e.value) }
            }
        }
        it.exclude()
    }

    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

repositories {
    flatDir {
        dir 'libs'
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

apply from: "https://charmony.work/gradle/fabric-include-toml.build.gradle"
apply from: "https://charmony.work/gradle/fabric-include-rei.build.gradle"
apply from: "https://charmony.work/gradle/fabric-include-modmenu.build.gradle"
apply from: "https://charmony.work/gradle/fabric-bundle-charmony.build.gradle"

repositories {
    maven {
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven { url = "https://jitpack.io" }
}

dependencies {
    include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.3.6")))
    modLocalRuntime("maven.modrinth:dragonloot:${project.dragonloot_version}+${project.minecraft_version}")
}